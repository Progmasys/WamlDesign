<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:waml="clr-namespace:WamlDesign">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="./Colors/WamlColor.Blue.xaml"/>
        <ResourceDictionary Source="./Colors/WamlLightThemeColor.xaml"/>
        <ResourceDictionary Source="Waml.Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="PrimaryBrush" Color="{StaticResource Primary}" po:Freeze="True"/>
    <SolidColorBrush x:Key="SecondaryBrush" Color="{StaticResource Secondary}" po:Freeze="True"/>
    <SolidColorBrush x:Key="BorderBackgroundSelected" Color="{StaticResource Dark-100}" po:Freeze="True"/>
    <SolidColorBrush x:Key="ButtonOutlinedMouseOver" Color="{StaticResource Light-200}" po:Freeze="True"/>
    <SolidColorBrush x:Key="ButtonOutlinedClick" Color="{StaticResource Light-100}" po:Freeze="True"/>
    <SolidColorBrush x:Key="ButtonStaticForeground" Color="{StaticResource White}" po:Freeze="True"/>

    <Style x:Key="WamlFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" 
                               StrokeDashArray="1 2" 
                               SnapsToDevicePixels="true" 
                               StrokeThickness="1" 
                               Stroke="{DynamicResource PrimaryBrushRegular}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>   

    <Style x:Key="WamlChromeWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NeutralBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Gray160}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="TextElement.FontWeight" Value="Medium"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BorderBackgroundSelected}"/>
                            <Setter Property="Opacity" Value=".8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="1"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray30}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WamlChromeWindowCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Neutral.Gray110}"/>
        <Setter Property="Foreground" Value="{StaticResource Neutral.Gray160}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="TextElement.FontWeight" Value="Medium"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Shared.SharedRed10}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="1"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray30}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- WamlDesign Button Style -->

    <Style x:Key="WamlToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Neutral.White}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Neutral.Gray130}"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Gray160}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <Canvas Width="40">
                            <Border x:Name="border"
                                    Background="{StaticResource Neutral.White}"
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    SnapsToDevicePixels="true" 
                                    CornerRadius="10" 
                                    Width="40" 
                                    Height="20"/>
                            <Ellipse x:Name="circle" 
                                     Height="12" 
                                     Width="12" 
                                     Margin="4" 
                                     Fill="{StaticResource Neutral.Gray130}" />
                        </Canvas>
                        <TextBlock x:Name="contentPresenter" 
                                   Text="{TemplateBinding Content}"
                                   FontWeight="SemiBold" 
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Margin="8,0"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryBrushRegular}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Neutral.White}"/>
                            <Setter Property="Margin" TargetName="circle" Value="24,4,4,4"/>                                            
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Neutral.Gray190}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Neutral.Gray190}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryBrushRegular}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false"/>
                                <Condition Property="IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Neutral.Gray60}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Neutral.Gray60}"/>
                            <Setter Property="Foreground" Value="{StaticResource Neutral.Gray60}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false"/>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray60}"/>
                            <Setter Property="Foreground" Value="{StaticResource Neutral.Gray60}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="WamlButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="TextElement.FontWeight" Value="Medium"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            SnapsToDevicePixels="true" 
                            CornerRadius="4">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PrimaryBrushLight}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PrimaryBrushMid}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray20}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Neutral.Gray20}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Neutral.Gray90}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WamlDropBoxOutlined" TargetType="{x:Type waml:WamlDropBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrushRegular}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="TextElement.FontWeight" Value="SemiBold"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type waml:WamlDropBox}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            SnapsToDevicePixels="true" 
                            CornerRadius="4">
                        <DockPanel>
                            <Border x:Name="contentPresenter" 
                                    Background="Transparent"
                                    CornerRadius="4">
                                <ContentPresenter Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" 
                                                  RecognizesAccessKey="True" 
                                                  SnapsToDevicePixels="True" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <waml:WamlIcon x:Name="arrowDownIcon" 
                                           Icon="ChevronDown" 
                                           Size="12" 
                                           TextElement.FontWeight="Normal" 
                                           Foreground="{StaticResource PrimaryBrushRegular}" 
                                           Margin="0 0 8 0" 
                                           VerticalAlignment="Center" 
                                           HorizontalAlignment="Right"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="border" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryBrushLight}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="contentPresenter" Value="{DynamicResource PrimaryBrushMid}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray20}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Neutral.Gray20}"/>
                            <Setter Property="TextElement.Foreground" TargetName="border" Value="{StaticResource Neutral.Gray90}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- WamlDesign Primary Button Style -->
    
    <Style x:Key="WamlPrimaryButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource WamlFocusVisual}"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="{DynamicResource 500}" Offset="0.3" />
                    <GradientStop Color="{DynamicResource A400}" Offset="2.0" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource ButtonStaticForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="TextElement.FontWeight" Value="SemiBold"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="0"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            SnapsToDevicePixels="true" 
                            CornerRadius="4">
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>                       
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryBrushDark}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Neutral.Gray20}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Neutral.Gray90}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style> 


    <Style x:Key="WamlFlatButtonStyle" TargetType="Button" BasedOn="{StaticResource WamlButtonStyle}">
        <Setter Property="Border.CornerRadius" Value="0"/>
    </Style>


</ResourceDictionary>